//*************************
// ParaCellSwc.hoc
// 2011/12/01
// Yusuke Mori
//*************************

//*************************
// 2015/01/14
// Editied by Heewon Park
//*************************


//-------------------------
// *** func&proc ***
// readlist()
// p_mkcells()
// p_mkstim()
// par_chemi_create()
// par_gap_create()

{load_file("nrngui.hoc")}
//{load_file("CellSwc.hoc")}
{load_file("areaList.hoc")}

//--- parallel start ---
//objref pc
//pc = new ParallelContext()

objref cells
objref cellnames
objref spikegens
objref swclist
objref nil
//--- area ---
objref cellbodylist
objref axonlist
objref dendlist

//--- number of cells and synapse gid (reset later) ---
NCELLS = 0
//syn_gid = NCELLS + 10

proc readlist(){ localobj strFunc strdef str, strTemp
    swclist = new File()
    swclist.ropen($s1)        
    //--- read comments ---
    strFunc = new StringFunctions()
    while(!swclist.eof()){
	swclist.gets(str)
	strFunc.head(str, "[^#]", strTemp)
	if(strcmp("#", strTemp) != 0) {
	    break
	}
    }
    //--- get Number of CELLS ---
    NCELLS = swclist.scanvar()

    //--- reset syn_gid ---
    syn_gid = NCELLS + 10
}

//------------------------------
// make cells and set position
//
proc p_mkcells() { local i, j, cb_t, cb_s, de_t, de_s, ax_t, ax_s, s_gen, cellnum localobj cell, namestring, nc, datafile strdef cellhoc, celltxt, name, tmpstr, posfilename
    // argument
    // $s1:list name
    // $2 :parallel(0) or serial(1) 
    // 

    cells = new List()    
    cellnames = new List()
    spikegens = new Vector()
    datafile = new File()
    //--- read list ---
    readlist($s1)     

    for (i = 0; i < NCELLS; i += 1) {	
	if(i % pc.nhost == pc.id || $2 == 1){
	    if(swclist.scanstr(name) != -1){
		//--- cell name ---
		namestring = new String(name)
		cellnames.append(namestring)

		//--- cell data file ---
		swclist.scanstr(celltxt)
		datafile.ropen(celltxt)

		datafile.scanstr(cellhoc)		

		cell = new CellSwc(cellhoc)

		//--- get area : CellBody, Axon, Dend ---
		cb_t = datafile.scanvar()
		cb_s = datafile.scanvar()
		de_t = datafile.scanvar()
		de_s = datafile.scanvar()
		ax_t = datafile.scanvar()
		ax_s = datafile.scanvar()

		//--- spike generator ---
		s_gen = datafile.scanvar()
		spikegens.append(s_gen)
		
		//--- position set ---
		swclist.scanstr(posfilename)				
		posInit(cell, posfilename)
		
		//--- append to the list ---
		cells.append(cell)

		//--- area set ---
		cellnum = cells.count() - 1
		print "Cell Number : " , cellnum, " of the pc_id : ", pc.id
		cell.secInput = areaList(de_t, de_s, cellnum)
		cell.secOutput = areaList(ax_t, ax_s, cellnum)
		
		//--- global id & spike detector ---
		pc.set_gid2node(i, pc.id) // associate gid i with this host
		cell.Dend[s_gen] nc = new NetCon(&v(.5), nil)		
		pc.cell(i, nc)            // associate gid i with spike detector
		
		datafile.close()

		//--- end the line ---
		swclist.gets(tmpstr)
	    }
	} else {
	    //--- cells in other processes ---
	    swclist.gets(tmpstr)
	    spikegens.append(-1)
	}
    }
    swclist.close()
}

proc posInit(){ local j, pos_x, pos_y, pos_z, meanx, meany, meanz localobj cell, posfile, rot
    cell = $o1
    posfile = new File()
    posfile.ropen($s2)
    rot = new Vector()

    //--- get pos ---
    pos_x = posfile.scanvar()
    pos_y = posfile.scanvar()
    pos_z = posfile.scanvar()
   
    //--- get rotate ---
    for(j = 0; j < 9; j += 1){
	rot.append(posfile.scanvar())
    }
    
    //--- calc gravity center ---
    meanx = meany = meanz = 0.0
    for j = 0, cell.SectionNum - 1 cell.Dend[j] {
	meanx += x3d(0)
	meany += y3d(0)
	meanz += z3d(0)
    }
    meanx /= cell.SectionNum
    meany /= cell.SectionNum
    meanz /= cell.SectionNum
    
    //--- set pos ---
    cell.translation(-meanx, -meany, -meanz)
    cellrotation(cell, rot)
    cell.translation(pos_x , pos_y , pos_z)
    
    posfile.close()
}
/************************************************
//------------------------------
// spike generator
//
load_file("insChannel.hoc")
proc p_insChan(){ local s_gen localobj c, tmp_sr
    if (pc.gid_exists($1)) {
	c = pc.gid2obj($1)
	s_gen = spikegens.x($1)
	print s_gen
	if(s_gen != -1){	
	    c.Dend[s_gen] tmp_sr = new SectionRef()
	    insertChannel(tmp_sr, $2, $3, $4, $5, $6)
	}
    }
}
************************************************/



//------------------------------
// stimulation
//
objref stims

proc p_mkstim_ic(){ localobj ic, c
    // argument
    // $1: target cell
    // $2: target compartment
    // $3: amp
    // $4: dur
    // $5: del
    if (pc.gid_exists($1)) {
	c = pc.gid2obj($1)
	stims = new List()
	c.Dend[$2] ic = new IClamp(0.5)
	ic.amp = $3
	ic.dur = $4
	ic.del = $5
	stims.append(ic)
    }
}

//------------------------------
// parallel chemical synapse
//
objref nclist
objref synlist
nclist = new List()
synlist = new List()

proc par_chemi_create(){ localobj nc, syn, c, csr
    // argument
    // $1 gid of pre
    // $2 compartment_num of pre
    // $3 gid of post
    // $4 compartment_num of post
    // $5 nc threshold
    // $6 reversal potential
    
    //print "syn_gid ",syn_gid
    //--- post
    if(pc.gid_exists($3)){
	
	c = pc.gid2obj($3)
	c.Dend[$4] csr = new SectionRef()
	print csr
	par_postsynapse(csr, syn_gid, $6)
	//c.Dend[$4] psection()
	
	//par_postsynapse2($3,$4,syn_gid,$6)
    }
    
    pc.barrier()
    
    //--- pre
    if(pc.gid_exists($1)){
	
	c = pc.gid2obj($1)
	c.Dend[$2] csr = new SectionRef()
	print csr
	par_presynapse(csr, syn_gid, $5)
	
	//par_presynapse2($1,$2,syn_gid,$5)
    }
    pc.barrier()
    //print syn_gid
    syn_gid += 1
}



proc par_postsynapse(){ local syn_gid localobj nc, syn
    // argument
    // #o1: post section ref
    access $o1.sec
    syn_gid = $2
    syn = new ExpSyn(.5)
    //--- reversal potential ---
    syn.e = $3
    //print syn.e
    nc = pc.gid_connect(syn_gid, syn)
    nc.delay = 1
    nc.weight = 1
    //print "post nc.threshold ",nc.threshold," nc.delay ",nc.delay," nc.weight ",nc.weight
    synlist.append(syn)
}

proc par_postsynapse2(){ local syn_gid,post_gid localobj nc, syn, c
    // argument
    // $1 cell's gid
    // $2 compartment number
    // $3 syn_gid
    post_gid = $1
    syn_gid = $3
    c = pc.gid2obj(post_gid)
    print "post ",post_gid, c, c.SectionNum,syn_gid
    c.Dend[$2] syn = new ExpSyn(0.5)
    
    syn.e = $4
    //print syn.e
    //--- reversal potential ---
    nc = pc.gid_connect(syn_gid, syn)
    nc.delay = 1
    nc.weight = 1
    //print "post nc.threshold ",nc.threshold," nc.delay ",nc.delay," nc.weight ",nc.weight
    synlist.append(syn)
}

proc par_presynapse(){ local syn_gid localobj nc
    // argument
    // $o1: pre section ref
    access $o1.sec
    syn_gid = $2
    nc = new NetCon(&v(0.5), nil)
    
    //    nc.threshold = $3
    nc.threshold = 1
    nc.weight = 1

    nclist.append(nc)
    pc.set_gid2node(syn_gid, pc.id)
    pc.cell(syn_gid, nc)
}

proc par_presynapse2(){ local syn_gid,pre_gid localobj nc,c
    // argument
    // $1 cell's gid
    // $2 compartment number
    // $3 syn_gid
    pre_gid = $1
    syn_gid = $3
    c = pc.gid2obj(pre_gid)
    print "pre ",pre_gid, c, c.SectionNum, syn_gid
    c.Dend[$2] nc = new NetCon(&v(0.5), nil)
    //    nc.threshold = $3
    nc.threshold = 10
    nc.weight = 1

    nclist.append(nc)
    pc.set_gid2node(syn_gid, pc.id)
    pc.cell(syn_gid, nc)
}
/*********************************************************

//-----------------------------
// parallel gap junction (electrical synapse)
//
objref par_gaps
par_gaps = new List()
gap_src_gid = 2

proc par_gap_create() {
    // argument
    // $1:gid of Compartment 1
    // $2:num of Compartment 1
    // $3:gid of Compartment 2
    // n$4:num of Compartment 2
    // $5:conductance (default : 1e-10(1/megohm))
    if (pc.gid_exists($1)) {
        par_gap_create1($1, $2, gap_src_gid + 1, gap_src_gid, $5)
    }
    if (pc.gid_exists($3)) {
        par_gap_create1($3, $4, gap_src_gid, gap_src_gid + 1, $5)
    }
    gap_src_gid += 2 
}

proc par_gap_create1() { localobj c, g
    c = pc.gid2obj($1)
    c.Dend[$2] {
	//--- Gap Create ---
	g = new gGapPar(.5)
        par_gaps.append(g)
        pc.target_var(&g.vgap, $3)
        pc.source_var(&v(.5), $4)
        g.g = $5
    }
}
********************************************************/
proc p_translation() { localobj c
    // argument
    // $1: gid of the target cell
    // $2: translation x
    // $3: translation y
    // $4: translation z
    if (pc.gid_exists($1)) {
	c = pc.gid2obj($1)
	c.translation($2, $3, $4) // CellSwc proc
    }
}

proc p_getPosition() { local j, meanx, meany, meanz localobj c
    if (pc.gid_exists($1)) {
	c = pc.gid2obj($1)
	//--- calc gravity center ---
	meanx = meany = meanz = 0.0
	for(j = 0; j < c.SectionNum; j += 1){
	    c.Dend[j] {
		meanx += x3d(0)
		meany += y3d(0)
		meanz += z3d(0)
	    }
	}
	meanx /= c.SectionNum
	meany /= c.SectionNum
	meanz /= c.SectionNum    
	//--- print position ---
	print "cell num = ", $1
	print "x = ", meanx
	print "y = ", meany
	print "z = ", meanz
    }
}

proc cellrotation() { local tmpx, tmpy, tmpz, tmp0x, tmp0y, tmp0z, tmp1x, tmp1y, tmp1z, diam0, diam1 localobj cell, rot
    cell = $o1
    rot  = $o2
    
    for (j = 0; j <  cell.SectionNum ; j += 1) {
	cell.Dend[j] {
	    tmp0x = x3d(0)
	    tmp0y = y3d(0)
	    tmp0z = z3d(0)
	    diam0 = diam3d(0)
	    tmp1x = x3d(1)
	    tmp1y = y3d(1)
	    tmp1z = z3d(1)
	    diam1 = diam3d(1)
	    
	    pt3dclear()
	    
	    //--- calc rotation ---
	    tmpx = rot.x(0) * tmp0x + rot.x(1) * tmp0y + rot.x(2) * tmp0z
	    tmpy = rot.x(3) * tmp0x + rot.x(4) * tmp0y + rot.x(5) * tmp0z
	    tmpz = rot.x(6) * tmp0x + rot.x(7) * tmp0y + rot.x(8) * tmp0z
	    pt3dadd(tmpx, tmpy, tmpz, diam0)
	    
	    tmpx = rot.x(0) * tmp1x + rot.x(1) * tmp1y + rot.x(2) * tmp1z
	    tmpy = rot.x(3) * tmp1x + rot.x(4) * tmp1y + rot.x(5) * tmp1z
	    tmpz = rot.x(6) * tmp1x + rot.x(7) * tmp1y + rot.x(8) * tmp1z
	    pt3dadd(tmpx, tmpy, tmpz, diam1)
	}
    }
}
