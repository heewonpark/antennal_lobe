
{load_file("nrngui.hoc")}
load_file("CellSwc_Ver2.hoc")
{load_file("stdlib.hoc")}
//{load_file("cellid.hoc")}
//{load_file("list1.hoc")}
{load_file("RecepterNeuron.hoc")}

strdef pn_filename,ln1filename, ln2filename
//pn_filename = "./SWC/PN/toroid/050622_4_sn.swc"
//rn_filename = "./SWC/070224_SN-23-R.swc"
pn_filename = "./SWC/050622_4_sn_bestrigid0106_mkRegion.swc"
ln1filename = "./SWC/040823_5_sn_bestrigid0106_mkRegion.swc"
ln2filename = "./SWC/050205_7_sn_bestrigid0106_mkRegion.swc"

strdef pn_synlist, ln1synlist, ln2synlist
pn_synlist = "./List/050622_4_sn_SynapseList.dat"
ln1synlist = "./List/040823_5_sn_SynapseList.dat"
ln2synlist = "./List/050205_7_sn_SynapseList.dat"

objref py
py = new PythonObject()
nrnpython("import time")

objref pc
pc = new ParallelContext()
load_file("ParallelTools.hoc")

starttime = startsw()

TSTOP = 50
//NUMRN = 4000
objref NumSynapseCom
NumSynapseCom = new Vector(3)
NumSynapseCom.x[0] = 300
NumSynapseCom.x[1] = 300
NumSynapseCom.x[2] = 400
sum = 0

Syn_per_Com = 4
for i=0, NumSynapseCom.size()-1{
    sum += NumSynapseCom.x[i]
}
NUMRN = sum*Syn_per_Com
if(pc.id ==0){
    print "nhost",pc.nhost
    print "Number of Recepter Neuron : ",NUMRN
}
objref recepters, projection, nclist
objref local1, local2
objref PathList
proc mkNetwork(){
    mkcells($1)
    connectcells()
    //    connectcells2()
    /*
    PathList = new List()
    PathList = readSynapseFileList()
    syn_gid = $1 + 3 //Number of RN + LN&PN
    for i=0, PathList.count()-1{
	print "i ",i, "Pahtlist ",PathList.o(i).s
	readSynapseList(PathList.o(i).s)
    }
    */
}

//Number of Compartments which have synapses
proc mkcells(){local i, j localobj cells,rn,nc, nil,nc1,nc2,nc3,nc4,nc5,nc6,nc7,nc8,nc9,nc10 //recepter neuron
    num_rn = $1
    recepters = new List()
    if(pc.id == 0){
	projection = new CellSwc(pn_filename)
	projection{
	    forall insert hh
	}
	pc.set_gid2node(0,pc.id)
	//	projection.makeSyn(21,1,1,-65)	
	//projection.synapses(21)
	
	projection.mkSynapses(pn_synlist)
	print pc.id, projection.synlist.count
	i = pc.id
	for j=0, projection.synlist.count-1{
	    projection.synlist.o(j).sid = j
	    projection.synlist.o(j).cid = i
	    
	}
	print "i",i
	projection.Dend[21] nc = new NetCon(&v(0.5),nil)
	nc.threshold = 1
	pc.cell(0,nc)
    }else if(pc.id == 1){
	print "local neuron1"
	local1 = new CellSwc(ln1filename)
	local1{
	    forall insert hh
	}
	pc.set_gid2node(1,pc.id)
	local1.mkSynapses(ln1synlist)
	print pc.id, local1.synlist.count
	i = pc.id
	for j=0, local1.synlist.count-1{
	    local1.synlist.o(j).sid = j
	    local1.synlist.o(j).cid = i
	}
	print "i",i
	local1.Dend[10000] nc = new NetCon(&v(0.5),nil)
	nc.threshold = 1
	pc.cell(1,nc)
    }else if(pc.id == 2){
	print "local neuron2"
	local2 = new CellSwc(ln2filename)
	local2{
	    forall insert hh
	}
	pc.set_gid2node(2,pc.id)
	local2.mkSynapses(ln2synlist)
	print pc.id, local2.synlist.count
	i = pc.id
	for j=0, local2.synlist.count-1{
	    local2.synlist.o(j).sid = j
	    local2.synlist.o(j).cid = i
	}
	print "i",i
	local2.Dend[10000] nc = new NetCon(&v(0.5),nil)
	nc.threshold = 1 
	pc.cell(2,nc)
	
    }else{
	for (i=pc.id; i<($1+3); i+=(pc.nhost-1-2)){
	    //print "pc.id ", pc.id
	    rn = new Stick()
	    recepters.append(rn)
	    pc.set_gid2node(i,pc.id)
	    //	    print "gid ", i
	    nc = rn.connect2target(nil)
	    pc.cell(i,nc)
	    
	}
 	print "pc.id",pc.id,"recepters count ",recepters.count()
    }
    pc.barrier()
}
/*
proc connectcells(){local i,j, targid,SynNumber localobj src,target,syn,nc
    nclist = new List()
    for j = 0, 2{
	if(pc.gid_exists(j)>0){
	    for i=0, NumSynapseCom.x[j]-1{
		//print "gid_exists ",pc.gid_exists(j)," pc.id ",pc.id, " i ", i
		target = pc.gid2cell(j)
		SynNumber = i
		syn = target.synlist.object(SynNumber)
		nc = pc.gid_connect(i,syn)
		nc.delay = 1
		nc.weight = 50/NUMRN
		//nc.weight = 2
		nclist.append(nc)
	    }
	}
    }
}
*/
proc connectcells(){local i,j, targid,SynNumber,numSynapse, Sum_numSynapse localobj src,target,syn,nc
    nclist = new List()
    Sum_numSynapse = 0
    for j = 0, 2{
	gid_min = Sum_numSynapse+3	
	numSynapse = NumSynapseCom.x[j]*Syn_per_Com
	Sum_numSynapse +=numSynapse
	if(!pc.gid_exists(j)){continue}
	print "j, gid_min ",j, gid_min
	for i=0, numSynapse-1{
	    //print "pc.id ",pc.id, "gid_min+i ",gid_min+i
	    target = pc.gid2cell(j)
	    SynNumber = i
	    syn = target.synlist.object(SynNumber)
	    nc = pc.gid_connect(gid_min+i,syn)
	    nc.delay = 1
	    //nc.weight = 50/NUMRN
	    nc.weight = 1
	    nclist.append(nc)
	}
	print "j, gid_min+i ",j, gid_min+i
    }
    pc.barrier()
}

proc connectcells2(){local i,j, targid,SynNumber,numSynapse, Sum_numSynapse localobj src,target,syn,nc
    //    nclist = new List()
    Sum_numSynapse = 0
    for j = 0, 0{
	if(!pc.gid_exists(j)){continue}
	print "j ",j
	for i=0, 10-1{
	    //print "pc.id ",pc.id, "gid_min+i ",gid_min+i
	    target = pc.gid2cell(j)
	    SynNumber = i
	    syn = target.synlist_.object(SynNumber)
	    print syn
	    nc = pc.gid_connect(5001+i,syn)
	    nc.delay = 1
	    nc.weight = 2
	    //nc.weight = 2
	    nclist.append(nc)
	}
	//print "j, gid_min+i ",j, gid_min+i
    }
    pc.barrier()
}

proc showInfo(){localobj cell
    cell = $o1
    for i=0, cell.SectionNum-1{
	cell.Dend[i] psection()
    }
}
mkNetwork (NUMRN)
if(pc.id ==0){
//    showInfo(projection)
}

objref stim,ncstim,ncslist,stimlist
proc mkstim(){localobj target
    ncslist = new List()
    stimlist = new List()
    for i = 0, NUMRN-1{
	if(!pc.gid_exists(i+3)){continue}
	//print "mkstim ", i
	stim = new NetStim()
	stim.number = 20
	stim.interval = 5
	stim.start = 1
	stimlist.append(stim)
	
	target = pc.gid2cell(i+3)
	target.synapse()
	ncstim = new NetCon(stim, target.synlist.object(0))
	ncstim.delay = 0
	ncstim.weight = 2
	ncslist.append(ncstim)
    }
}
//mkstim()
proc mkstim_single(){localobj target
    if(!pc.gid_exists(0)){return}
    stim = new NetStim()
    stim.number = 10
    stim.interval = 5
    stim.start = 1
    target = pc.gid2cell(0)
    ncstim = new NetCon(stim, target.synlist.object(0))
    ncstim.delay = 0
    ncstim.weight = 1
}
//mkstim_single()

proc mkstim_multipoint(){localobj target
    if(!pc.gid_exists(0)){return}
    print "mkstim_multipoint ",pc.id
    stim = new NetStim()
    stim.number = 10
    stim.interval = 5
    stim.start = 1
    target = pc.gid2cell(0)
    print target
    for i= 0, 10{
	ncstim = new NetCon(stim, target.synlist.object(i*10))
	ncstim.threshold = 1
	ncstim.delay = 0
	ncstim.weight = 1
    }
}
//mkstim_multipoint()

proc mkstim_multipoint2(){local j,i localobj target
    for j = 0, 0{
	print "j",j
	if(!pc.gid_exists(j)){continue}
	print "mkstim_multipoint2 ",j
	stim = new NetStim()
	stim.number = 10
	stim.interval = 10
	stim.start = 1
	target = pc.gid2cell(j)
	print target
	for i= 0, 10{
	    ncstim = new NetCon(stim, target.synlist.object(i*10))
	    ncstim.threshold = 1
	    ncstim.delay = 0
	    ncstim.weight = 1
	}
    }
}
//mkstim_multipoint2()
proc mkIClamp(){local stoptime, timestep localobj rand
    stoptime = $1
    timestep = $2
    
    rand = new Random()
    
    strdef filename
    if(pc.id>2){
	for i=0, recepters.count-1{
	    //	    print "mkIClamp pc.id ", pc.id, recepters.count
	    sprint(filename,"./spiketiming/spiketiming%d.dat",int(rand.uniform(0,999)))
	    //sprint(filename,"./spiketiming/spiketiming100.dat")
	    recepters.object(i).setIClamp(stoptime, timestep, filename)
	    //print "stim_vec printf ",i
	    //	recepters.object(i).stim_vec.printf()
	}
    }
    pc.barrier()
}
//print dt
//mkIClamp(TSTOP, dt)

/*
proc setIclamp(){
    if(pc.gid_exists(1)){
	local1.mkIclamp(17076)
	local1.mkIclamp(19171)
    }
}*/
proc setIclamp(){
    if(pc.gid_exists(0)){
	projection.mkIclamp(1000)
    }
}
setIclamp()

proc mkSinglePulse(){local i localobj ic
    for i=0, recepters.count()-1{
	recepters.object(i).setSinglePulse(pc.nhost,pc.id,i)
    }
    pc.barrier()
}
//mkSinglePulse()
proc mkSerialPulse(){local i localobj ic
    for i=0, recepters.count()-1{
	recepters.object(i).setSerialPulse(pc.nhost,pc.id,i)
    }
    pc.barrier()
}
//mkSerialPulse()
objref tvec, idvec
proc spikerecord(){local i localobj nc, nil,nclist
    tvec = new Vector()
    idvec = new Vector()
    nclist = new List()
    if(pc.id == 0){
	//print "spike record ",pc.id
	projection.Dend[21] nc = new NetCon(&v(0.5),nil)
	nc.record(tvec,idvec,nc.srcgid)
    }else if(pc.id == 1){
	
    }else if(pc.id == 2){
	
    }else{
	//print "spike record ",pc.id
	for i=0, recepters.count-1{
	    //print "recepters.count ",recepters.count, " i ",i
	    nc = recepters.object(i).connect2target(nil)
	    nc.record(tvec, idvec, nc.srcgid)
	    nclist.append(nc)
	    //print "nc.srcgid ",nc.srcgid
	}
    }
}
//spikerecord()


objref RNvolt_vec[4000]
objref PNvolt_vec
objref volt_tvec 
/*
proc setVoltageRecord(){local i
    for i= 0, NUMRN-1{
	RNvolt_vec[i] = new Vector()
    }
    volt_tvec = new Vector()
    volt_tvec.record(&t)
    if(pc.id == 0){
	PNvolt_vec = new Vector()
	PNvolt_vec.record(&projection.Dend[21].v(0.5))
    }else{
	for i=0, recepters.count-1{
	    RNvolt_vec[i].record(&recepters.object(i).soma.v(0.5))
	}
    }
}*/
//setVoltageRecord()

objref PNvolt_vecs[4000]
objref LNvolt_vecs[2]
objref LN1volt_vecs[4000]
objref LN2volt_vecs[4000]

proc setVoltageRecord2(){local i
    for i= 0, recepters.count()-1{
	RNvolt_vec[i] = new Vector()
    }
    for i= 0, 4000-1{
	PNvolt_vecs[i] = new Vector()
	LN1volt_vecs[i] = new Vector()
	LN2volt_vecs[i] = new Vector()
    }
    volt_tvec = new Vector()
    volt_tvec.record(&t)
    if(pc.id == 0){
	PNvolt_vec = new Vector()
	//PNvolt_vec.record(&projection.Dend[1211].v(0.5))
	PNvolt_vec.record(&projection.Dend[475].v(0.5))
	print "PN record"
	for i=0, projection.SynNumberList.size()-1{
	    //print projection.SynNumberList.x[i]
	    PNvolt_vecs[i].record(&projection.Dend[projection.SynNumberList.x[i]].v(0.5))
	}
    }else if(pc.id == 1){
	LNvolt_vecs[0] = new Vector()
	LNvolt_vecs[0].record(&local1.Dend[21706].v(0.5))
	print "LN1 record", local1.SynNumberList
	for i=0, local1.SynNumberList.size()-1{
	    LN1volt_vecs[i].record(&local1.Dend[local1.SynNumberList.x[i]].v(0.5))
	}
    }else if(pc.id == 2){
	LNvolt_vecs[1] = new Vector()
	LNvolt_vecs[1].record(&local2.Dend[11197].v(0.5))
	print "LN2 record", local2.SynNumberList
	for i=0, local2.SynNumberList.size()-1{
	    LN2volt_vecs[i].record(&local2.Dend[local2.SynNumberList.x[i]].v(0.5))
	}
    }else{
	for i=0, recepters.count()-1{
	    RNvolt_vec[i].record(&recepters.object(i).soma.v(0.5))
	}
    }
    pc.barrier()
}
setVoltageRecord2()

nrnpython("t1 = time.time()")
printf("psolve start[%d]\n",pc.id)
tstop = TSTOP
{pc.set_maxstep(10)}
stdinit()
{pc.psolve(tstop)}
print "psolve end"
endtime = stopsw()
nrnpython("t2 = time.time()")
pc.barrier()
/*
if(pc.id ==0){
    print "TIME ", py.t2-py.t1
}
*/
proc spikeout(){local i, rank
    pc.barrier()
    if(pc.id==0)printf("\ntime\t cell\n")
    for rank = 0, pc.nhost-1{
	if(rank == pc.id){
	    if((rank==2)||(rank==1)){
		continue
	    }
	    //	    print "pc.id  ", pc.id
	    //print "Num Spikes ", tvec.size(), " ", idvec.x[i]
	    for i = 0, tvec.size-1{
		printf("%g\t %d\n",tvec.x[i],idvec.x[i])
	    }
	}
	pc.barrier()
    }
}
//spikeout()
/*
proc fprintVoltageRecord(){localobj mt, file
    mt = new Matrix()
    file = new File()
    strdef filename
    if(pc.id== 0){
	mt.resize(volt_tvec.size(),2)
	mt.setcol(0,volt_tvec)
	mt.setcol(1,PNvolt_vec)
    }else{
	mt.resize(volt_tvec.size(),recepters.count + 1)
	mt.setcol(0,volt_tvec)
	for i=0, recepters.count-1{
	    mt.setcol(i+1,RNvolt_vec[i])
	}
    }
    sprint(filename,"Voltagerecord%d.txt",pc.id)
    file.wopen(filename)
    mt.fprint(file,"%5.5f\t")
    file.close()
}
fprintVoltageRecord()
*/
proc fprintVoltageRecord2(){localobj mt, file,mt2, file2
    mt = new Matrix()
    file = new File()
    
    strdef filename
    if(pc.id== 0){
	mt.resize(volt_tvec.size(),2)
	mt.setcol(0,volt_tvec)
	mt.setcol(1,PNvolt_vec)
	file2 = new File()
	mt2 = new Matrix()
	mt2.resize(volt_tvec.size(),projection.SynNumberList.size()+1)
	mt2.setcol(0,volt_tvec)
	for i=0, projection.SynNumberList.size()-1{
	    mt2.setcol(i+1,PNvolt_vecs[i])
	}
	file2.wopen("./Record/PNsynVoltagerecord.txt")
	mt2.fprint(file2,"%5.5f\t")
	file2.close()
    }else if(pc.id == 1){
	mt.resize(volt_tvec.size(),2)
	mt.setcol(0,volt_tvec)
	mt.setcol(1,LNvolt_vecs[0])

	file2 = new File()
	mt2 = new Matrix()
	mt2.resize(volt_tvec.size(),local1.SynNumberList.size()+1)
	mt2.setcol(0,volt_tvec)
	for i=0, local1.SynNumberList.size()-1{
	    mt2.setcol(i+1,LN1volt_vecs[i])
	}
	file2.wopen("./Record/LN1synVoltagerecord.txt")
	mt2.fprint(file2,"%5.5f\t")
	file2.close()

    }else if(pc.id == 2){
	mt.resize(volt_tvec.size(),2)
	mt.setcol(0,volt_tvec)
	mt.setcol(1,LNvolt_vecs[1])

	file2 = new File()
	mt2 = new Matrix()
	mt2.resize(volt_tvec.size(),local2.SynNumberList.size()+1)
	mt2.setcol(0,volt_tvec)
	for i=0, local2.SynNumberList.size()-1{
	    mt2.setcol(i+1,LN2volt_vecs[i])
	}
	file2.wopen("./Record/LN2synVoltagerecord.txt")
	mt2.fprint(file2,"%5.5f\t")
	file2.close()

    }else{
	mt.resize(volt_tvec.size(),recepters.count + 1)
	mt.setcol(0,volt_tvec)
	for i=0, recepters.count-1{
	    mt.setcol(i+1,RNvolt_vec[i])
	}
    }
    sprint(filename,"./Record/Voltagerecord%d.txt",pc.id)
    file.wopen(filename)
    mt.fprint(file,"%5.5f\t")
    file.close()
}
fprintVoltageRecord2()


{pc.runworker()}
{pc.done()}
print "\n"
print "******************"
print "* End Simulation *"
print "******************"
quit()